/*
 * the below code generated by Tabnine
 */
/*
 * package com.gen.demo.controller;
 * 
 * import java.util.List; import java.util.Optional;
 * 
 * import org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.web.bind.annotation.DeleteMapping; import
 * org.springframework.web.bind.annotation.GetMapping; import
 * org.springframework.web.bind.annotation.PathVariable; import
 * org.springframework.web.bind.annotation.PostMapping; import
 * org.springframework.web.bind.annotation.PutMapping; import
 * org.springframework.web.bind.annotation.RequestBody; import
 * org.springframework.web.bind.annotation.RequestMapping; import
 * org.springframework.web.bind.annotation.RequestParam; import
 * org.springframework.web.bind.annotation.RestController;
 * 
 * import com.gen.demo.domain.User; import com.gen.demo.service.UserService;
 * 
 * @RestController
 * 
 * @RequestMapping("/api/users") public class UserController {
 * 
 * @Autowired private UserService userService;
 * 
 * @GetMapping public List<User> getAllUsers() { return
 * userService.getAllUsers(); }
 * 
 * @GetMapping("/{id}") public User getUserById(@PathVariable String id) {
 * return userService.getUserById(id); }
 * 
 * @PostMapping public User createUser(@RequestBody User user) { return
 * userService.createUser(user); }
 * 
 * @PutMapping("/{id}") public User updateUser(@PathVariable String
 * id, @RequestBody User user) { return userService.updateUser(id, user); }
 * 
 * @DeleteMapping("/{id}") public void deleteUser(@PathVariable String id) {
 * userService.deleteUser(id); }
 * 
 * @GetMapping("/check-user-exists") public Optional<User>
 * checkUserExists(@RequestParam(required = false) String userName,
 * 
 * @RequestParam(required = false) String email) { return
 * userService.findByUserNameOrEmail(userName, email); } }
 */

/*
 * below code implemented by GPT
 * 
 */

package com.gen.demo.controller;

import com.gen.demo.domain.User;
import com.gen.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    // Create operation
    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User createdUser = userService.createUser(user);
        return new ResponseEntity<>(createdUser, HttpStatus.CREATED);
    }

    // Read operation
    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable String id) {
        User user = userService.getUserById(id);
        if (user != null) {
            return new ResponseEntity<>(user, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Read all operation
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    // Update operation
    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable String id, @RequestBody User user) {
        User updatedUser = userService.updateUser(id, user);
        if (updatedUser != null) {
            return new ResponseEntity<>(updatedUser, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    // Delete operation
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        boolean deleted = userService.deleteUser(id);
        if (deleted) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
 // New API to check if user exists based on email
    @GetMapping("/exists/email/{email}")
    public ResponseEntity<Boolean> checkUserExistsByEmail(@PathVariable String email) {
        boolean exists = userService.existsByEmail(email);
        return new ResponseEntity<>(exists, HttpStatus.OK);
    }

    // New API to check if user exists based on userName
    @GetMapping("/exists/username/{userName}")
    public ResponseEntity<Boolean> checkUserExistsByUserName(@PathVariable String userName) {
        boolean exists = userService.existsByUserName(userName);
        return new ResponseEntity<>(exists, HttpStatus.OK);
    }
    
    // New API for searching users by name, userName, and email
    @GetMapping("/search")
    public ResponseEntity<List<User>> searchUsers(
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String userName,
            @RequestParam(required = false) String email
    ) {
        List<User> users = userService.searchUsers(name, userName, email);
        return new ResponseEntity<>(users, HttpStatus.OK);
    }
}
