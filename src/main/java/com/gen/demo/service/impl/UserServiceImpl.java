/*
 * the below code generated by Tabnine
 */
/*
 * package com.gen.demo.service.impl;
 * 
 * import java.util.List; import java.util.Optional;
 * 
 * import org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.stereotype.Service;
 * 
 * import com.gen.demo.domain.User; import
 * com.gen.demo.repository.UserRepository; import
 * com.gen.demo.service.UserService;
 * 
 * @Service public class UserServiceImpl implements UserService {
 * 
 * @Autowired private UserRepository userRepository;
 * 
 * @Override public List<User> getAllUsers() { return userRepository.findAll();
 * }
 * 
 * @Override public User getUserById(String id) { Optional<User> user =
 * userRepository.findById(id); return user.orElse(null); }
 * 
 * @Override public User createUser(User user) { return
 * userRepository.save(user); }
 * 
 * @Override public User updateUser(String id, User user) { Optional<User>
 * existingUser = userRepository.findById(id); if (existingUser.isPresent()) {
 * User updatedUser = existingUser.get(); updatedUser.setName(user.getName());
 * updatedUser.setUserName(user.getUserName());
 * updatedUser.setEmail(user.getEmail());
 * updatedUser.setPassword(user.getPassword());
 * updatedUser.setActive(user.isActive());
 * updatedUser.setCreatedDate(user.getCreatedDate());
 * updatedUser.setCreatedBy(user.getCreatedBy()); return
 * userRepository.save(updatedUser); } else { return null; } }
 * 
 * @Override public void deleteUser(String id) { userRepository.deleteById(id);
 * }
 * 
 * @Override public Optional<User> findByUserNameOrEmail(String userName, String
 * email) { return userRepository.findByUserNameOrEmail(userName, email); }
 * 
 * }
 */

/*
 * below code implemented by GPT
 * impl package was not given by GPT 
 * few Imports has to be done

*/
package com.gen.demo.service.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gen.demo.domain.User;
import com.gen.demo.repository.UserRepository;
import com.gen.demo.service.UserService;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public User createUser(User user) {
        return userRepository.save(user);
    }

    @Override
    public User getUserById(String id) {
        Optional<User> userOptional = userRepository.findById(id);
        return userOptional.orElse(null);
    }

    @Override
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Override
    public User updateUser(String id, User user) {
        if (userRepository.existsById(id)) {
            user.setId(id);
            return userRepository.save(user);
        } else {
            return null;
        }
    }

    @Override
    public boolean deleteUser(String id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return true;
        } else {
            return false;
        }
    }
    
    @Override
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }

    @Override
    public boolean existsByUserName(String userName) {
        return userRepository.existsByUserName(userName);
    }
    

//    @Override
//    public List<User> searchUsers(String name, String userName, String email) {
//        if (name != null) {
//            return userRepository.findByNameContainingIgnoreCase(name);
//        } else if (userName != null) {
//            return userRepository.findByUserNameContainingIgnoreCase(userName);
//        } else if (email != null) {
//            return userRepository.findByEmailContainingIgnoreCase(email);
//        } else {
//            // Return all users if no search parameters provided
//            return userRepository.findAll();
//        }
//    }
    
    // optimized method
//    @Autowired
//    private EntityManager entityManager;
//
//    @Override
//    public List<User> searchUsers(String name, String userName, String email) {
//        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
//        CriteriaQuery<User> cq = cb.createQuery(User.class);
//        Root<User> userRoot = cq.from(User.class);
//        List<Predicate> predicates = new ArrayList<>();
//
//        if (name != null && !name.isEmpty()) {
//            predicates.add(cb.like(cb.lower(userRoot.get("name")), "%" + name.toLowerCase() + "%"));
//        }
//        if (userName != null && !userName.isEmpty()) {
//            predicates.add(cb.like(cb.lower(userRoot.get("userName")), "%" + userName.toLowerCase() + "%"));
//        }
//        if (email != null && !email.isEmpty()) {
//            predicates.add(cb.like(cb.lower(userRoot.get("email")), "%" + email.toLowerCase() + "%"));
//        }
//
//        cq.where(predicates.toArray(new Predicate[0]));
//        return entityManager.createQuery(cq).getResultList();
//    }

    //updated with JDBC 
    @Autowired
    private DataSource dataSource;

	/*
	 * @Override public List<User> searchUsers(String name, String userName, String
	 * email) { List<User> users = new ArrayList<>(); Connection connection = null;
	 * PreparedStatement statement = null; ResultSet resultSet = null;
	 * 
	 * try { connection = dataSource.getConnection();
	 * 
	 * StringBuilder queryBuilder = new
	 * StringBuilder("SELECT * FROM User WHERE isActive = 1");
	 * 
	 * if (name != null && !name.isEmpty()) {
	 * queryBuilder.append(" AND LOWER(name) LIKE ?"); } if (userName != null &&
	 * !userName.isEmpty()) { queryBuilder.append(" AND LOWER(userName) LIKE ?"); }
	 * if (email != null && !email.isEmpty()) {
	 * queryBuilder.append(" AND LOWER(email) LIKE ?"); }
	 * 
	 * statement = connection.prepareStatement(queryBuilder.toString());
	 * 
	 * int paramIndex = 1; if (name != null && !name.isEmpty()) {
	 * statement.setString(paramIndex++, "%" + name.toLowerCase() + "%"); } if
	 * (userName != null && !userName.isEmpty()) { statement.setString(paramIndex++,
	 * "%" + userName.toLowerCase() + "%"); } if (email != null && !email.isEmpty())
	 * { statement.setString(paramIndex++, "%" + email.toLowerCase() + "%"); }
	 * 
	 * resultSet = statement.executeQuery();
	 * 
	 * while (resultSet.next()) { User user = new User();
	 * user.setId(resultSet.getString("id"));
	 * user.setName(resultSet.getString("name"));
	 * user.setUserName(resultSet.getString("userName"));
	 * user.setEmail(resultSet.getString("email")); // Set other user properties
	 * here if needed users.add(user); } } catch (SQLException e) {
	 * e.printStackTrace(); } finally { try { if (resultSet != null)
	 * resultSet.close(); if (statement != null) statement.close(); if (connection
	 * != null) connection.close(); } catch (SQLException e) { e.printStackTrace();
	 * } }
	 * 
	 * return users; }
	 */
    
    @Override
    public List<User> searchUsers(String name, String userName, String email) {
        try (Connection connection = dataSource.getConnection()) {
            String query = buildSearchQuery(name, userName, email);
            return executeQuery(connection, query,name, userName, email);
        } catch (SQLException e) {
            e.printStackTrace();
            return Collections.emptyList(); // Handle exception gracefully
        }
    }

    private String buildSearchQuery(String name, String userName, String email) {
        StringBuilder queryBuilder = new StringBuilder("SELECT * FROM User WHERE isActive = 1");

        if (name != null && !name.isEmpty()) {
            queryBuilder.append(" AND LOWER(name) LIKE ?");
        }
        if (userName != null && !userName.isEmpty()) {
            queryBuilder.append(" AND LOWER(userName) LIKE ?");
        }
        if (email != null && !email.isEmpty()) {
            queryBuilder.append(" AND LOWER(email) LIKE ?");
        }

        return queryBuilder.toString();
    }

	/*
	 * 
	 * private List<User> executeQuery(Connection connection, String query) throws
	 * SQLException { List<User> users = new ArrayList<>();
	 * 
	 * try (PreparedStatement statement = connection.prepareStatement(query)) { int
	 * paramIndex = 1; if (name != null && !name.isEmpty()) {
	 * statement.setString(paramIndex++, "%" + name.toLowerCase() + "%"); } if
	 * (userName != null && !userName.isEmpty()) { statement.setString(paramIndex++,
	 * "%" + userName.toLowerCase() + "%"); } if (email != null && !email.isEmpty())
	 * { statement.setString(paramIndex++, "%" + email.toLowerCase() + "%"); }
	 * 
	 * try (ResultSet resultSet = statement.executeQuery()) { while
	 * (resultSet.next()) { User user = new User();
	 * user.setId(resultSet.getString("id"));
	 * user.setName(resultSet.getString("name"));
	 * user.setUserName(resultSet.getString("userName"));
	 * user.setEmail(resultSet.getString("email")); // Set other user properties
	 * here if needed users.add(user); } } }
	 * 
	 * return users; }
	 */
    /*
     * above code had param missing issue fixed as mentioned below
     */
    private List<User> executeQuery(Connection connection, String query, String name, String userName, String email) throws SQLException {
        List<User> users = new ArrayList<>();

        try (PreparedStatement statement = connection.prepareStatement(query)) {
            int paramIndex = 1;
            if (name != null && !name.isEmpty()) {
                statement.setString(paramIndex++, "%" + name.toLowerCase() + "%");
            }
            if (userName != null && !userName.isEmpty()) {
                statement.setString(paramIndex++, "%" + userName.toLowerCase() + "%");
            }
            if (email != null && !email.isEmpty()) {
                statement.setString(paramIndex++, "%" + email.toLowerCase() + "%");
            }

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    User user = new User();
                    user.setId(resultSet.getString("id"));
                    user.setName(resultSet.getString("name"));
                    user.setUserName(resultSet.getString("userName"));
                    user.setEmail(resultSet.getString("email"));
                    // Set other user properties here if needed
                    users.add(user);
                }
            }
        }

        return users;
    }



}
